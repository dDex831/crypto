name: "Auto Trade Bot"

on:
    schedule:
      - cron: "*/5 * * * *"   # 每 5 分钟执行一次（注意 GitHub 会按照 “最近的 5 分钟倍数” 来跑）
    workflow_dispatch:

jobs:
  run_auto_trade:
    name: Run Auto Trade Script
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout 代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 允许本 workflow 将修改后的 state.json push 回仓库
          persist-credentials: true
          fetch-depth: 0

      # 2. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # 3. 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-binance pandas numpy

      # 4. （可选）列出仓库文件结构，方便调试
      - name: List repository files  # 调试时可保留，确认脚本位置
        run: |
          ls -R .

      # 5. 运行根目录下的 auto_trade.py
      - name: Run auto_trade.py
        env:
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
        run: |
          # 脚本位于仓库根目录，无需 cd 到 subfolder
          python auto_trade.py

      # 6. 检查并提交 state.json 是否有变更（假设 state.json 也在根目录）
      - name: Commit state changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # 如果根目录下的 state.json 有变化，就提交并推送
          if [[ -n "$(git status --porcelain state.json)" ]]; then
            git add state.json
            git commit -m "Update state.json [skip ci]"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No state changes to commit."
          fi
